from env import *
import pandas as pd
import matplotlib.pyplot as plt
import pickle
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

cards = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
Q={(1, 1): 0.2208, (1, 2): 0.2208, (1, 3): 0.2256, (1, 4): 0.2216, (1, 5): 0.2392, (1, 6): 0.252, (1, 7): 0.252, (1, 8): 0.2248, (1, 9): 0.2348, (1, 10): 0.2296, (1, 11): 0.2476, (1, 12): 0.246, (1, 13): 0.2016, (1, 14): 0.2316, (1, 15): 0.2436, (1, 16): 0.322, (1, 17): 0.4782, (1, 18): 0.6332, (1, 19): 0.7746, (1, 20): 0.8782, (1, 21): 0.9614, (2, 1): 0.162, (2, 2): 0.1756, (2, 3): 0.1652, (2, 4): 0.1744, (2, 5): 0.1732, (2, 6): 0.164, (2, 7): 0.1576, (2, 8): 0.1708, (2, 9): 0.1476, (2, 10): 0.182, (2, 11): 0.1668, (2, 12): 0.1732, (2, 13): 0.1572, (2, 14): 0.16, (2, 15): 0.1568, (2, 16): 0.268, (2, 17): 0.4452, (2, 18): 0.6102, (2, 19): 0.7412, (2, 20): 0.8482, (2, 21): 0.9532, (3, 1): 0.1224, (3, 2): 0.1028, (3, 3): 0.0776, (3, 4): 0.118, (3, 5): 0.118, (3, 6): 0.126, (3, 7): 0.114, (3, 8): 0.0816, (3, 9): 0.1104, (3, 10): 0.1088, (3, 11): 0.0944, (3, 12): 0.1232, (3, 13): 0.138, (3, 14): 0.0808, (3, 15): 0.0984, (3, 16): 0.2072, (3, 17): 0.3908, (3, 18): 0.5778, (3, 19): 0.708, (3, 20): 0.8588, (3, 21): 0.9462, (4, 1): 0.046, (4, 2): 0.0208, (4, 3): 0.0856, (4, 4): 0.0616, (4, 5): 0.044, (4, 6): 0.0536, (4, 7): 0.058, (4, 8): 0.0564, (4, 9): 0.0352, (4, 10): 0.0456, (4, 11): 0.0308, (4, 12): 0.0572, (4, 13): 0.0412, (4, 14): 0.0588, (4, 15): 0.0372, (4, 16): 0.1716, (4, 17): 0.3782, (4, 18): 0.5318, (4, 19): 0.6944, (4, 20): 0.8234, (4, 21): 0.9456, (5, 1): -0.0144, (5, 2): 0.0084, (5, 3): 0.004, (5, 4): -0.0044, (5, 5): -0.0032, (5, 6): 0.0028, (5, 7): 0.0184, (5, 8): -0.0004, (5, 9): 0.0136, (5, 10): -0.0188, (5, 11): -0.006, (5, 12): 0.0148, (5, 13): 0.0132, (5, 14): -0.014, (5, 15): 0.0284, (5, 16): 0.1082, (5, 17): 0.3284, (5, 18): 0.5046, (5, 19): 0.6826, (5, 20): 0.8232, (5, 21): 0.9424, (6, 1): -0.0628, (6, 2): -0.0716, (6, 3): -0.1004, (6, 4): -0.1072, (6, 5): -0.0712, (6, 6): -0.098, (6, 7): -0.0716, (6, 8): -0.0744, (6, 9): -0.0936, (6, 10): -0.1088, (6, 11): -0.0776, (6, 12): -0.1024, (6, 13): -0.084, (6, 14): -0.0896, (6, 15): -0.0888, (6, 16): 0.0816, (6, 17): 0.3454, (6, 18): 0.529, (6, 19): 0.6914, (6, 20): 0.8198, (6, 21): 0.9428, (7, 1): -0.176, (7, 2): -0.182, (7, 3): -0.1784, (7, 4): -0.1884, (7, 5): -0.1892, (7, 6): -0.1768, (7, 7): -0.2132, (7, 8): -0.1676, (7, 9): -0.182, (7, 10): -0.18, (7, 11): -0.162, (7, 12): -0.182, (7, 13): -0.1872, (7, 14): -0.19, (7, 15): -0.1944, (7, 16): -0.005, (7, 17): 0.302, (7, 18): 0.538, (7, 19): 0.6908, (7, 20): 0.8336, (7, 21): 0.9428, (8, 1): -0.2464, (8, 2): -0.27, (8, 3): -0.2664, (8, 4): -0.2972, (8, 5): -0.2532, (8, 6): -0.254, (8, 7): -0.264, (8, 8): -0.262, (8, 9): -0.2684, (8, 10): -0.2744, (8, 11): -0.2552, (8, 12): -0.2536, (8, 13): -0.2748, (8, 14): -0.2508, (8, 15): -0.2864, (8, 16): -0.1086, (8, 17): 0.1992, (8, 18): 0.4962, (8, 19): 0.6914, (8, 20): 0.8432, (8, 21): 0.9486, (9, 1): -0.358, (9, 2): -0.3544, (9, 3): -0.3492, (9, 4): -0.3672, (9, 5): -0.3532, (9, 6): -0.3584, (9, 7): -0.3432, (9, 8): -0.3516, (9, 9): -0.3524, (9, 10): -0.3392, (9, 11): -0.3524, (9, 12): -0.3584, (9, 13): -0.3492, (9, 14): -0.3508, (9, 15): -0.3548, (9, 16): -0.216, (9, 17): 0.1084, (9, 18): 0.3706, (9, 19): 0.64, (9, 20): 0.8378, (9, 21): 0.9478, (10, 1): -0.424, (10, 2): -0.4424, (10, 3): -0.4088, (10, 4): -0.4192, (10, 5): -0.4304, (10, 6): -0.4412, (10, 7): -0.4356, (10, 8): -0.4516, (10, 9): -0.4508, (10, 10): -0.44, (10, 11): -0.4564, (10, 12): -0.4444, (10, 13): -0.4172, (10, 14): -0.4428, (10, 15): -0.4112, (10, 16): -0.2916, (10, 17): -0.0166, (10, 18): 0.2672, (10, 19): 0.53, (10, 20): 0.7786, (10, 21): 0.9536, (11, 1): -0.52, (11, 2): -0.494, (11, 3): -0.5016, (11, 4): -0.4996, (11, 5): -0.4892, (11, 6): -0.5168, (11, 7): -0.5012, (11, 8): -0.5232, (11, 9): -0.508, (11, 10): -0.5024, (11, 11): -0.5204, (11, 12): -0.5156, (11, 13): -0.5424, (11, 14): -0.5064, (11, 15): -0.5132, (11, 16): -0.3706, (11, 17): -0.094, (11, 18): 0.1586, (11, 19): 0.4162, (11, 20): 0.6558, (11, 21): 0.8934, (12, 1): -0.4516, (12, 2): -0.4432, (12, 3): -0.4532, (12, 4): -0.4496, (12, 5): -0.426, (12, 6): -0.4528, (12, 7): -0.4708, (12, 8): -0.436, (12, 9): -0.46, (12, 10): -0.44, (12, 11): -0.4436, (12, 12): -0.4628, (12, 13): -0.4472, (12, 14): -0.4612, (12, 15): -0.4472, (12, 16): -0.301, (12, 17): -0.0348, (12, 18): 0.215, (12, 19): 0.4596, (12, 20): 0.6758, (12, 21): 0.8986, (13, 1): -0.3632, (13, 2): -0.3596, (13, 3): -0.3696, (13, 4): -0.3852, (13, 5): -0.384, (13, 6): -0.3672, (13, 7): -0.38, (13, 8): -0.3544, (13, 9): -0.362, (13, 10): -0.3452, (13, 11): -0.3496, (13, 12): -0.3604, (13, 13): -0.3736, (13, 14): -0.3704, (13, 15): -0.3712, (13, 16): -0.2364, (13, 17): -0.018, (13, 18): 0.2696, (13, 19): 0.4646, (13, 20): 0.7066, (13, 21): 0.9006, (14, 1): -0.308, (14, 2): -0.3048, (14, 3): -0.2752, (14, 4): -0.2992, (14, 5): -0.294, (14, 6): -0.2944, (14, 7): -0.3096, (14, 8): -0.3144, (14, 9): -0.324, (14, 10): -0.3064, (14, 11): -0.286, (14, 12): -0.3236, (14, 13): -0.3048, (14, 14): -0.3196, (14, 15): -0.2764, (14, 16): -0.1842, (14, 17): 0.0852, (14, 18): 0.2664, (14, 19): 0.4832, (14, 20): 0.7166, (14, 21): 0.9042, (15, 1): -0.2116, (15, 2): -0.2432, (15, 3): -0.2096, (15, 4): -0.228, (15, 5): -0.226, (15, 6): -0.2492, (15, 7): -0.2348, (15, 8): -0.2192, (15, 9): -0.2372, (15, 10): -0.2504, (15, 11): -0.236, (15, 12): -0.2248, (15, 13): -0.1992, (15, 14): -0.244, (15, 15): -0.2456, (15, 16): -0.1122, (15, 17): 0.1096, (15, 18): 0.3204, (15, 19): 0.5268, (15, 20): 0.7174, (15, 21): 0.9068}

def new_v(V, s, a, gamma=0.9):
    env = Easy21()
    avg_v = 0
    s_ = [0,0]
    if a == 0:
        s_[0] = s[0]
        for v in cards:
            r = 0
            s_[1] = s[1] + v
            key1 = tuple(s_)
            if isOver(s_, 1):
                r = -1
            avg_v += (r + gamma * V[key1]) / 30
    else:
        s_[1] = s[1]
        r = 0
        for v in cards:
            s_[0] = s[0] + v
            key1 = tuple(s_)
            avg_v += (gamma * V[key1]) / 30
        r = Q[tuple(s)]
        avg_v += r
    return avg_v

def get_strategy(V, pai):
    S=dict()
    X = np.arange(1, 11)
    Y = np.arange(1, 22)
    changed = False
    for x in X:
        for y in Y:
            my_action = pai[tuple((x,y))]  # 当前行为
            my_action_value = V[tuple((x,y))]  # 当前行为回报
            if (my_action == 0):
                action = 1
            else:
                action = 0
            action_value = new_v(V,s=(x,y),a=action)
            if action_value > my_action_value:
                my_action = action
                my_action_value = action_value
            if pai[tuple((x,y))] != my_action:
                changed = True
            pai[tuple((x,y))] = my_action
    return pai, changed

def strategy_init():
    S=dict()
    X = np.arange(1, 11)
    Y = np.arange(1, 22)
    for x in X:
        for y in Y:
            S[tuple((x, y))] = 1
    return S

def all_states():
    X = np.arange(1, 11)
    Y = np.arange(21, 0,-1)
    res = []
    for y in Y:
        for x in X:
            res.append([x,y])
    return res

def V_init():
    S = dict()
    Y = np.arange(1, 22)
    X = np.arange(1, 11)
    for x in X:
        for y in Y:
            S[tuple((x,y))] = 0
    X = np.arange(11, 16)
    for x in X:
        for y in Y:
            S[tuple((x, y))] = Q[tuple((x, y))]
    X = np.arange(16, 22)
    for x in X:
        for y in Y:
            if x > y:
                S[tuple((x, y))] = -1.0
            elif x < y:
                S[tuple((x, y))] = 1.0
            else:
                S[tuple((x, y))] = 0.0
    X = np.arange(1, 22)
    Y = np.arange(-9, 1)
    for x in X:
        for y in Y:
            S[tuple((x,y))] = -1.0
    Y = np.arange(22,32)
    for x in X:
        for y in Y:
            S[tuple((x,y))] = -1.0
    X = np.arange(-9, 1)
    Y = np.arange(1, 22)
    for x in X:
        for y in Y:
            S[tuple((x,y))] = 1.0
    X = np.arange(22,32)
    for x in X:
        for y in Y:
            S[tuple((x,y))] = 1.0
    return S

def V_update(pai):
    V = V_init()
    states = all_states()
    while True:
        maxerror = 0
        delta = 0
        for state in states:
            key = tuple(state)
            a = pai[key]
            avg_v = new_v(V, state, a)
            delta += (avg_v - V[key])*(avg_v - V[key])
            # delta = (avg_v - V[key])
            V[key] = avg_v
            # maxerror = max(maxerror, delta)
        delta /= len(states)
        if delta <= 1e-10:
            return V
            

def train(V):
    pai = strategy_init()
    num = 0
    for eposide in range(1000):
        V = V_update(pai)
        pai, changed = get_strategy(V, pai)
        if not changed:
            print(eposide)
            return pai
    return pai

def test(pai):
    flag = False
    s = init()
    key = tuple(s)
    a = pai[key]
    env = Easy21()
    while not flag:
        #执行动作
        key = tuple(s)
        s, r, flag = env.step(s, a)
        #选择下一步动作
        if not flag:
            a = pai[tuple(s)]
    return r

if __name__ == "__main__":
    V = V_init()
    pai = train(V)
    test_win = 0
    for k in range(100000):
        reward = test(pai)
        if reward == 1:
            test_win += 1
    print("win_rate:", float(test_win)/100000)